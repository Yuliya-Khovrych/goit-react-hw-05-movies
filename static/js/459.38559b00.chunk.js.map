{"version":3,"file":"static/js/459.38559b00.chunk.js","mappings":"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","sources":["components/Loader/Loader.jsx","components/MovieItem/MovieItem.jsx","components/MovieList/MovieList.styled.js","components/MovieList/MovieList.jsx","fetch-api/search-movies.js","components/Searchbar/Searchbar.styled.js","components/Searchbar/Searchbar.jsx","pages/Movies.jsx"],"sourcesContent":["import { CirclesWithBar } from 'react-loader-spinner';\n\nexport const Loader = () => (\n  <div>\n    <CirclesWithBar\n      height=\"100\"\n      width=\"70\"\n      color=\"#3f51b5\"\n      wrapperStyle={{ justifyContent: 'center' }}\n      wrapperClass=\"\"\n      visible={true}\n      outerCircleColor=\"\"\n      innerCircleColor=\"\"\n      barColor=\"\"\n      ariaLabel=\"circles-with-bar-loading\"\n    />\n    ;\n  </div>\n);\n","import { Link } from 'react-router-dom';\nimport noPicture from '../../images/noPicture.png';\nimport PropTypes from 'prop-types';\n\nexport const MovieItem = ({ id, title, poster, voteAverage, state }) => {\n  return (\n    <div>\n      <Link to={`/movies/${id}`} state={state}>\n        <img\n          width=\"380px\"\n          src={poster ? `https://image.tmdb.org/t/p/w500/${poster}` : noPicture}\n          alt={title}\n        />\n        <h3>{title}</h3>\n        <p>{voteAverage}</p>\n      </Link>\n    </div>\n  );\n};\n\nMovieItem.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string,\n  poster: PropTypes.string,\n  voteAverage: PropTypes.number,\n  state: PropTypes.string,\n};\n","import styled from 'styled-components';\n\nexport const Movies = styled.ul`\n  list-style: none;\n  display: grid;\n  padding: 40px 0;\n  grid-template-columns: repeat(3, 380px);\n  gap: 30px;\n`;\n","import { MovieItem } from 'components/MovieItem/MovieItem';\nimport { Movies } from './MovieList.styled';\nimport PropTypes from 'prop-types';\n\nexport const MovieList = ({ movies, state }) => {\n  return (\n    <Movies>\n      {movies.map(({ id, title, poster, voteAverage}) => (\n        <li key={id}>\n          <MovieItem\n            id={id}\n            title={title}\n            poster={poster}\n            voteAverage={voteAverage}\n            state={state}\n          />\n        </li>\n      ))}\n    </Movies>\n  );\n}\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      state: PropTypes.string,\n    })\n  ).isRequired,\n};","import axios from 'axios';\n\n//const BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '09a141b997a10edba2747d029eb90ca7';\n\nexport async function getSearchMovies(query) {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/search/movie/?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n\n  console.log(response.data);\n  return response.data;\n}\n","import styled from 'styled-components';\n\nexport const SearchForm = styled.form`\n  margin: 0 auto;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  max-width: 600px;\n  background-color: #fff;\n  border-radius: 3px;\n  overflow: hidden;\n  border-bottom: 1px solid grey;\n`;\n\nexport const SearchFormButton = styled.button`\n  display: inline-block;\n  width: 48px;\n  height: 48px;\n  border: 0;\n  background-size: 40%;\n  background-repeat: no-repeat;\n  background-position: center;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n  :hover {\n    opacity: 1;\n  }\n`;\n\nexport const SearchFormInput = styled.input`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 20px;\n  border: none;\n  outline: none;\n  padding-left: 4px;\n  padding-right: 4px;\n\n  ::placeholder {\n    font: inherit;\n    font-size: 18px;\n  }\n`;\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport toast from 'react-hot-toast';\nimport { BsSearch } from 'react-icons/bs';\nimport {\n  SearchForm,\n  SearchFormButton,\n  SearchFormInput,\n} from './Searchbar.styled';\n\nexport const Searchbar = ({ onSubmit }) => {\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const handleChange = evt => {\n    setSearchQuery(evt.target.value.toLowerCase());\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    if (searchQuery.trim() === '') {\n      return toast.error(\n        'The search string cannot be empty. Please specify your search query.'\n      );\n    }\n    onSubmit(searchQuery);\n  };\n\n  return (\n      <SearchForm onSubmit={handleSubmit}>\n        <SearchFormButton type=\"submit\">\n          <BsSearch size={20} />\n        </SearchFormButton>\n        <SearchFormInput\n          type=\"text\"\n          autocomplete=\"off\"\n          autoFocus\n          placeholder=\"Search movies\"\n          name=\"searchQuery\"\n          value={searchQuery}\n          onChange={handleChange}\n        />\n      </SearchForm>\n  \n  );\n};\n\nSearchbar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { useSearchParams, useLocation } from 'react-router-dom';\nimport toast, { Toaster } from 'react-hot-toast';\nimport { getSearchMovies } from '../fetch-api/search-movies';\nimport { Searchbar } from '../components/Searchbar/Searchbar';\nimport { Loader } from '../components/Loader/Loader';\nimport { Container } from '../components/SharedLayout/SharedLayout.styled';\nimport { MovieList } from '../components/MovieList/MovieList';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [foundMovies, setFoundMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [, setError] = useState(null);\n  const searchQuery = searchParams.get('query') ?? '';\n  const location = useLocation();\n\n  const handleFormSubmit = value => {\n    setSearchParams(value !== '' ? { query: value } : {});\n  };\n\n  useEffect(() => {\n    if (searchQuery === '') {\n      return;\n    }\n    async function getSearchMoviesData() {\n      try {\n        setIsLoading(true);\n        setError(null);\n        const searchMoviesData = [];\n        const resp = await getSearchMovies(searchQuery);\n        console.log(resp);\n\n        const moviesSearchInfo = resp.results;\n        console.log(moviesSearchInfo);\n\n        if (moviesSearchInfo.length === 0) {\n          toast.error(\n            'Sorry, there are no movies matching your search query. Please try again.'\n          );\n          setSearchParams(prevSearchParams => (prevSearchParams = {}));\n          setFoundMovies(prevFoundMovies => (prevFoundMovies = []));\n          return;\n        }\n\n        moviesSearchInfo.map(\n          ({ id, original_title, poster_path, vote_average, name }) => {\n            const movie = {\n              id,\n              name,\n              title: original_title,\n              poster: poster_path,\n              voteAverage: vote_average,\n            };\n            return searchMoviesData.push(movie);\n          }\n        );\n\n        setFoundMovies(searchMoviesData);\n      } catch (error) {\n        toast.error('We`re sorry, something went wrong!');\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getSearchMoviesData();\n  }, [searchQuery, setSearchParams]);\n\n  return (\n    <Container>\n      <Searchbar onSubmit={handleFormSubmit} />\n      {isLoading && <Loader />}\n      {foundMovies.length > 0 && (\n        <MovieList movies={foundMovies} state={{ from: location }} />\n      )}\n      <Toaster position=\"top-right\" />\n    </Container>\n  );\n};\n\nexport default Movies;"],"names":["Loader","height","width","color","wrapperStyle","justifyContent","wrapperClass","visible","outerCircleColor","innerCircleColor","barColor","ariaLabel","MovieItem","id","title","poster","voteAverage","state","to","src","noPicture","alt","Movies","styled","MovieList","movies","map","API_KEY","getSearchMovies","query","axios","response","console","log","data","SearchForm","SearchFormButton","SearchFormInput","Searchbar","onSubmit","useState","searchQuery","setSearchQuery","evt","preventDefault","trim","toast","type","size","autocomplete","autoFocus","placeholder","name","value","onChange","target","toLowerCase","useSearchParams","searchParams","setSearchParams","foundMovies","setFoundMovies","isLoading","setIsLoading","setError","get","location","useLocation","useEffect","searchMoviesData","resp","moviesSearchInfo","results","length","prevSearchParams","prevFoundMovies","original_title","poster_path","vote_average","movie","push","getSearchMoviesData","from","position"],"sourceRoot":""}