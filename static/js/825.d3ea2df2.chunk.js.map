{"version":3,"file":"static/js/825.d3ea2df2.chunk.js","mappings":"uQAEMA,EAAW,+BACXC,EAAU,mCAET,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAuBC,GAAvB,uFACkBC,EAAAA,EAAAA,IAAA,UAClBJ,EADkB,kBACAG,EADA,4BACsBF,EADtB,oBADlB,cACCI,EADD,OAKLC,QAAQC,IAAIF,EAASG,MALhB,kBAMEH,EAASG,MANX,kE,yCCFMC,EAAW,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OAC1C,OACE,4BACE,gBACEC,IAAKD,EAAM,0CAAsCA,GAAWE,EAC5DC,IAAKJ,EACLK,MAAM,SAER,4BACE,uBAAIL,KACJ,uCAAeD,UAItB,ECdYO,EAAW,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACzB,OACE,eAAIC,MAAO,CAAEC,UAAW,QAAxB,SACGF,EAAKG,KAAI,gBAAGlB,EAAH,EAAGA,GAAIO,EAAP,EAAOA,UAAWC,EAAlB,EAAkBA,KAAMC,EAAxB,EAAwBA,OAAxB,OACR,yBACE,SAACH,EAAD,CAAUC,UAAWA,EAAWC,KAAMA,EAAMC,OAAQA,KAD7CT,EADD,KAOf,ECLe,SAASmB,IACvB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOP,EAAP,KAAaQ,EAAb,KACA,GAAqBD,EAAAA,EAAAA,UAAS,MAArBE,GAAT,eACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAwBA,OAtBAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,sGAEQD,GAAa,GACbF,EAAS,MACPI,EAAW,GAJrB,SAK2B7B,EAAQqB,GALnC,OAKcS,EALd,OAMQ1B,QAAQC,IAAIyB,EAAKd,MACrBc,EAAKd,KAAKG,KAAI,YAA4C,IAClDY,EAAgB,CAAE9B,GAD+B,EAAxCA,GACaO,UAD2B,EAApCA,UACoBC,KADgB,EAAzBA,KACeC,OADU,EAAnBsB,cAEpC,OAAOH,EAASI,KAAKF,EACtB,IACDP,EAAQK,GAXZ,kDAaIK,EAAAA,GAAAA,MAAY,sCAbhB,yBAeIP,GAAa,GAfjB,8EADc,uBAAC,WAAD,wBAmBdQ,EACD,GAAE,CAACd,KAGF,UAAC,KAAD,WACGK,IAAa,SAACU,EAAA,EAAD,IACbpB,EAAKqB,OAAS,GACb,SAACtB,EAAD,CAAUC,KAAMA,KAEhB,wEAEF,SAAC,KAAD,CAASsB,SAAS,gBAGvB,C,6EC7CYF,EAAS,kBACpB,4BACE,SAAC,KAAD,CACEG,OAAO,MACPzB,MAAM,KACN0B,MAAM,UACNC,aAAc,CAAEC,eAAgB,UAChCC,aAAa,GACbC,SAAS,EACTC,iBAAiB,GACjBC,iBAAiB,GACjBC,SAAS,GACTC,UAAU,6BAXd,MADoB,C","sources":["fetch-api/cast.js","components/Cast/CastItem.jsx","components/Cast/CastList.jsx","components/Cast/Cast.jsx","components/Loader/Loader.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '09a141b997a10edba2747d029eb90ca7';\n\nexport async function getCast(id) {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n\n  console.log(response.data);\n  return response.data;\n}\n","import noPicture from '../../images/noPicture.png';\nimport PropTypes from 'prop-types';\n\nexport const CastItem = ({ character, name, poster }) => {\n  return (\n    <div>\n      <img\n        src={poster ? `https://image.tmdb.org/t/p/w500/${poster}` : noPicture}\n        alt={name}\n        width=\"250\"\n      />\n      <div>\n        <p>{name}</p>\n        <p>Character: {character}</p>\n      </div>\n    </div>\n  );\n};\n\nCastItem.propTypes = {\n  character: PropTypes.string,\n  name: PropTypes.string,\n  poster: PropTypes.string,\n};\n","import PropTypes from 'prop-types';\nimport { CastItem } from 'components/Cast/CastItem';\n\nexport const CastList = ({ cast }) => {\n  return (\n    <ul style={{ listStyle: 'none' }}>\n      {cast.map(({ id, character, name, poster }) => (\n        <li key={id}>\n          <CastItem character={character} name={name} poster={poster} />\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nCastList.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n    })\n  ).isRequired,\n};","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport toast, { Toaster } from 'react-hot-toast';\nimport { getCast } from 'fetch-api/cast';\nimport { Container } from 'components/SharedLayout/SharedLayout.styled';\nimport { Loader } from 'components/Loader/Loader';\nimport { CastList } from 'components/Cast/CastList';\n\nexport  default function Cast () {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    async function getCastData() {\n        try {\n            setIsLoading(true);\n            setError(null);\n        const castData = [];\n            const resp = await getCast(movieId);\n            console.log(resp.cast);\n        resp.cast.map(({ id, character, name, profile_path }) => {\n          const movieCastData = { id, character, name, poster: profile_path };\n          return castData.push(movieCastData);\n        });\n        setCast(castData);            \n      } catch (error) {\n        toast.error('We`re sorry, something went wrong!');\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getCastData();\n  }, [movieId]);\n\n  return (\n    <Container>\n      {isLoading && <Loader />}\n      {cast.length > 0 ? (\n        <CastList cast={cast} />\n      ) : (\n        <p>There is no cast information for this movie</p>\n      )}\n      <Toaster position=\"top-right\" />\n    </Container>\n  );\n}","import { CirclesWithBar } from 'react-loader-spinner';\n\nexport const Loader = () => (\n  <div>\n    <CirclesWithBar\n      height=\"100\"\n      width=\"70\"\n      color=\"#3f51b5\"\n      wrapperStyle={{ justifyContent: 'center' }}\n      wrapperClass=\"\"\n      visible={true}\n      outerCircleColor=\"\"\n      innerCircleColor=\"\"\n      barColor=\"\"\n      ariaLabel=\"circles-with-bar-loading\"\n    />\n    ;\n  </div>\n);\n"],"names":["BASE_URL","API_KEY","getCast","id","axios","response","console","log","data","CastItem","character","name","poster","src","noPicture","alt","width","CastList","cast","style","listStyle","map","Cast","movieId","useParams","useState","setCast","setError","isLoading","setIsLoading","useEffect","castData","resp","movieCastData","profile_path","push","toast","getCastData","Loader","length","position","height","color","wrapperStyle","justifyContent","wrapperClass","visible","outerCircleColor","innerCircleColor","barColor","ariaLabel"],"sourceRoot":""}